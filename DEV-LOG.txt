6/11/2021

1. build basic test circuit

built prototype amplifier using power supply -5V, G, +5V
unable to get the output pin to amplify the input - it saturates

2. diagnose circuit, simplify 
read datasheet, learned that there needs to be a current path from input pins to ref.
added this, but still no go!.

replaced input by a potentiometer to debug circuit. no go.
traced the voltages around the circuit and noted that -5V wasn't reaching pin 4.
fixed this, and can get output via potentiometer.

replaced potentimeter with k type probe

chose a value for Rg - 860ohm this gives a gain of 5 + 10k/860 ~= 150

3. move to single power supply with voltage divider method

use 1k2 resister to give a voltage reference - a solution to operating off a single supply but is not ideal because:
  - the voltage is not "stiff" unless the impedence is low but low impedence implies higher current draw
  - halves the voltage range 

go this working ok.

plugged in microprocessor with 3.3V ADC - so used g and 3.3V supply to power amplifier

noticed there was a lot of noise on the output - put 0.1uf caps on input lines to dramatically reduce.

4. moved from breadboard to PCB

again no go - output saturates
inspected PCB and couldn't find any bad joints

voltages all seem good - preplexed

5. Diagnose issues

switched back to dual power supply - stil no go!
removed microprocessor and used power supply for power - working as expected!!

checked voltages again - noticed that pin 4 was 0V when pin 4 is supposed to be -3.3V (not sure how I missed that)
turns out pin 4 was bridged to the GND on the microprocessor - so saturating in the same way as the first problem i had !!

removed solder bridges

tested k type probe and noticed it was dead. replaced probe.

everything seems to work.

6. Look for equations for k type probe

see attached spreadsheet. 
standard NIST polynomial has 9 terms !
suggested P/Q approximation has 6 coefficients.

Out of curiousity I did a linear regression over the 0 to 400 degrees which is more than adequate for my application,
Found a linear equation that gives a very close match over that range.

So we'll use that.

Thot = 24.487*Vprobe + 0.312

Cold junction compensation:
  a*V + c = Thot - Tcold
  => Thot = a*V + c + Tcold


7. incorporated the above into the firmware - gets fairly close results but depends very much on
the offset from the die temperature to the cold end temperature, this is not constant, the environmental
conditions of the board make a huge difference - I'm guessing +/-10 degrees.

Question: if the whole system was put in a box without ventilation I would expect the system to reach thermal 
equilibrium and thus would this offset actually drop to 0 ? Or at least a constant offset.

We could try adding a thermistor at the cold end this should remove the offset error.

We could just accept a fairly wide inaccuracy - and/or test this with the board enclosed and see if the offset 
stabilises. For the intended purpose of a bang bang controlled toaster oven the temperature is not going to be
controlled precisely anyway.

9999. Possible precision improvements

Not sure what the error introduced by the following systemic sources of error:
 
  1. ADC imprecision, we're not using the whole ADC range from GND to -3.3V
  2. measureing the DC offset via ADC adds own error
  3. using ambient die temperature - calibrated to equal cold jucntion temperature by an offset

Fixes

1+2. Use 5V rail for postive power rail, and build capicator diode pump to create negative voltage, use PWM pin 
   output on microprocessor to create oscillator for diode pump. This should get us a negative voltage.
   We can then remove the need to measure Vref, since it will also be GND. By changing the gain we can increase
   the range over of the measured voltage over the 0 to 300 degrees range.

3. Measure the cold junction temperature with a thermister - this should get an much more precise value for Tcold end.


3/01/2022

Finished initial design and after a lot of trouble calibrating the the 3d printer for ABS got
a first print:
- ABS shrinks, I didn't account for that
- PCB doesn't have enough space to slot into the angles under the nut holders
- the probe socket pins are incorrectly spaced ( too narrow )
- the USB connector is too far from front case
- the holes in the panel didn't line up of the right hand side (mismeasurement)
- holes too small for screws (shrinkage?)
- the lid fits too loose (shrinkage + 2*fit_tolerance)
- the lid needs support underneath where the screws aren't supporting it.
- the hole for the SSR plug is a tight fit but works.
- support material got inside the but holders mkaing them useless.

Mods
- removed nut holders they were unnecessary
- a melted a slot in the front panel to allow the PCB to get slightly closer
  and thus slot into the case properly.
- drilled out holes for lid screws 
- drilled out hole for PCB attachment 
- melted the pins on the thermister plug to "fit"
- drilled hole through front panel screw hole

After that everything seems to fit nicely.
Since this is a once off prototype I haven't fixed the model. 

7/01/2022

- Implemented GCodeParser: note that in future, I'll think I'll write
  a better parser, there is no error handling with this library. More 
  research required to find out syntax for GCode. (see Marlin source code?)

- Had a lot of trouble gettting the blackpill board to enter the 
  DFU bootloader. In order to make this livable I added an M997
  Gcode command that enters the system bootloader programmatically.
  This appears to be much more reliable than the BOOT0 + RESET pin
  combo. (Hypotheses: transient currents during startup mess with USB somehow?)
  (code mdofied from here: )

  8/01/2022

  - cleanup the the M997 jump to bootloader code
  - discovered that the reason the upload freezes on the raspberry pi 4 is because
    the dfu-util (tool-dfuutil 1.9.190708) in the platform-io script enters an infinite loop 
    simply replaced it with a symbolic link to dfu-util_bin as a quick fix.

  10/07/2024 

  - Accidentally blew up SSR by shorting the mains across the terminals. Turns out I had 
  wired the switch incorrectly. Pulled part the other side of the oven, and realised its 
  not wired the way I imagined: instead the hidden side of every element was wired together! 
  
  I wired the switch to permanent put power across all of the elements so they contribute 
  to the heating. Only the bottom two go red, but the top ones are heating too. As long as 
  the elements work I'm not too fussed.

  - Ordered new SSR along with a proper steel covered K-Type prove and a dedicated i2c board
    to do a proper cold end and measurement. The intention was to upgrade to higher precision.

  - But first I wanted to see if the current design is "good enough" to for things like
    drying filament and reflow soldering.

  - I got an IR thermometer in the hope that this will make it easier to calibrate but 
    turns out to be tricky because the reading varies from 100 to 187, I assume because
    the highly reflective metal in the toaster oven confuses the measurement.

  - I tried putting a black plastic filament spool (empty) and measuring that but it was
    seemed still unreliable. I recalibrated the second set point to this value anyway. 

  - Instead I put a green ceramic cup in the oven in order to wait for it to achieve thermal
    equalibrium and then measure its temperature at two points to calibrate the best 
    I can. The two points are 60 degrees and 100 degrees.

  - Turns out that the cup measured about 99 degrees when the oven was set to 100 so
    I'm leaving the calibration as is and seeing if it still works at the 60 degrees
    set point !! (Maybe my black plastic wasn't as unreliable as I thought)

  - At 60 the degree set point the cup measured 62 degrees (but spot on 60 if taken out of oven)
    so this looks OK. Would be to nice to graph a contact thermometer over time and compare 
    to get an accurate picture but +-2 degrees seems good enough for now.

  13/07/2024

  Further testing: tryied to push to the 150 degrees but this casued some kind of dramatic change
  the ADC reading - jumped back about 800 and this caused a thermal runaway like condition
  (but the mechanical thermostat prevented the oven from overheating). 

  Hypothesis: The connectiongs to the K-Type probe expanded due to increasing heat and this
  caused increased resistance in the leads, whcih in turn reduced the measured voltage causing
  the reported temoerateu to drop by about 100 degrees.

  Other things I noticed that need to be fixed in the firmware:
    - the derivative is very janky because there really isn't much precision on the temperature
      reading, and this causes the D parameter to wildly fluctatue.
    - fix: 
       1. slow down the callback loop so there are bigger measures differences.
       2. AND/OR keep a buffer of previous errors and calculate the derivative (maybe just average)

  The P parameter can be wildly outside the output window and this means because of clipping any
  contirbution die to I or D will be potentially be dwarfed. I wonder if the limits should be 
  applied to P before added I and D?. Or alternatively the P,I,D should be better tuned and
  have more impact?

  15/07/2024

  Well it looks like the prototype board has stopped functioning - or possbily my K Type probe
  has broken too (I can't get a millivolts measurement via the multimeter and tempreature doesn't work - 
  but I lost the adapter from the probe plug to bannana plugs, put I think this is straight through anyhow)
  
  The board now has wildly varying ADC measruements. Touching a finger on the gain resistor makes this
  even more wild. Not sure what has changed. 

  Reverse engineered the schematics to see how everything is being wired up.

  Couple of things to notice:
    - The INA126 is powered by 5V but the Vref on STM32 is set to 3.3V by the dev board.
    - There is a voltage divider to set Ref on INA126 to 1.65V but this uses 1k8 resistors and might be too high impedance?
    - Bizairely the probe inputs are connected to Ref instead of ground via a 2M resister!! Datasheet says 10k.
    - Looks like Ref is connected to the STM32 pin PA1 - but we're not configuring that pin!
    - Could be shorted from Vo to Re?
    - There are no decoupling caps for the INA126

  Things to fix:
    1. Ensure gain is appropriately set as to not go over 3.3V on Vo so that we're less than Vref.
    2. Remove the 2M resister and replace it with a 10k from the probes to the proper ground! This should remove a source 
       of noise that might be contributing to the instability.
    3. Remove connection to pin PA1 in case this is a factor (should remove possible short here too.)
    4. Use an opamp to buffer the Ref pin as described in the INA126 datasheet - this might make the circuit more reliable.
    5. Add 1uF caps to INA126
    6. Maybe remove caps onthe probe since they aren't specified in the datasheet, they might be unnecessary.
    7. Get a new K Type probe for debugging to eliminate the potential of broken probe (need bannna plug to probe adapter too 
       since I've lost that)

  Also: need a solution to attach new steel encased probe securely. I'm thinking replacing the screw terminal with some 
  bolts and washers should be adequate. Hopefullly the brand new probe will be working if we can fix the board.

  Later on: I was able to fix the K type probe contacts by opening the plug and untwisting the wires
  this seems to have restore functionality to the device but yeah probably worth upgrading to the proper
  K type probe board I bought - this communicates over i2c and has built in cold junction compensation.

  I might still give the existing board a go with lower temperatures - but if the cold junction heats up
  too much I think it will be really off so for reliability it needs the upgrade.

  
  